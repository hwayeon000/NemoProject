


-- SQLPLUS SYSTEM/12345 -> C##TEST계정 생성
CREATE USER C##TEST IDENTIFIED BY 12345;
-- 계정에 권한 부여
GRANT RESOURCE, CONNECT TO C##TEST;
-- 접근 권한 부여
GRANT SELECT ON C##SERVICE.직원 TO C##TEST;

-- -> TEST 계정에서 조회시 테이블 조회 가능


SELECT * FROM C##SERVICE.직원;
------------------------------------------------------
select * from user_info;
select * from game_info;
select * from user_game_info;

UPDATE USER_INFO SET USER_COIN = 30 WHERE USER_SEQ = 41;
UPDATE USER_INFO SET USER_COIN = 10 WHERE USER_SEQ = 42;
UPDATE USER_INFO SET USER_COIN = 2 WHERE USER_SEQ = 43;
COMMIT;

INSERT INTO USER_GAME_INFO( USER_SEQ , GAME_SEQ, GAME_TIME, GAME_CLEAR ) VALUES ( 41 , 3 , '0,56' , 1 );
INSERT INTO USER_GAME_INFO( USER_SEQ , GAME_SEQ, GAME_TIME, GAME_CLEAR ) VALUES ( 42 , 3 , '1,56' , 1 );
INSERT INTO USER_GAME_INFO( USER_SEQ , GAME_SEQ, GAME_TIME, GAME_CLEAR ) VALUES ( 43 , 3 , '0,42' , 1 );
commit;

-- 클리어하면 1, 아니면 0
INSERT INTO USER_GAME_INFO( USER_SEQ , GAME_SEQ , GAME_TIME , GAME_CLEAR ) VALUES ( 21 , 21 , '0,56' , 1 );
INSERT INTO USER_GAME_INFO( USER_SEQ , GAME_SEQ , GAME_TIME , GAME_CLEAR ) VALUES ( 21 , 21 , '0,56' , 1 );

COMMIT;

SELECT * FROM (SELECT ROWNUM AS RN, GAME_SEQ, GAME_CODE FROM GAME_INFO WHERE GAME_LEVEL = 1 ORDER BY GAME_SEQ) WHERE RN = 1;

select user_coin from user_info where user_seq = 1;
SELECT USER_COIN FROM USER_INFO WHERE USER_SEQ = 21;

SELECT * FROM (SELECT ROWNUM AS RN, GAME_SEQ, GAME_CODE FROM GAME_INFO WHERE GAME_LEVEL = 1 ORDER BY GAME_SEQ) WHERE RN = 2;

SELECT ROWNUM AS RN, game_seq, game_ans FROM GAME_INFO WHERE game_level = 1 order by game_seq;

select * from user_info where user_seq = 3;
UPDATE user_info SET user_coin = 6 where user_seq = 58;
commit;

SELECT * FROM user_info WHERE user_id = 'test' and user_pw = '1234';

UPDATE user_info SET user_coin = 10, user_life = 3 where user_id = 'test';


SELECT A.USER_NICK, B.GAME_TIME FROM USER_INFO A , 
( SELECT * FROM USER_GAME_INFO WHERE GAME_SEQ = 21
ORDER BY LENGTH(GAME_TIME),GAME_TIME ASC ) B
WHERE A.USER_SEQ = B.USER_SEQ ;

-- game_seq에 따른랭크 출력
SELECT A.USER_NICK, B.GAME_TIME FROM USER_INFO A , (SELECT * FROM USER_GAME_INFO WHERE GAME_SEQ = 3
ORDER BY LENGTH(GAME_TIME),GAME_TIME ASC) B WHERE A.USER_SEQ = B.USER_SEQ;


-----------------------------------------------------------------------------------

UPDATE game_info SET game_ans = '10000,00000,00000,00000,00000' where game_seq = 1;

-- 하트
UPDATE game_info SET game_ans = '01010,11111,11111,01110,00100' where game_seq = 1;
-- 스마일
UPDATE game_info SET game_ans = '01010,01010,00000,10001,01110' where game_seq = 3;
-- 열쇠
UPDATE game_info SET game_ans = '00100,00100,01110,01010,01110' where game_seq = 2;
-- 우산
-- 01110,11111,10101,00100,00110
-- 집
-- 00100,01110,11111,01010,01110
-- 딸기
-- 00100,11111,10101,01010,00100

-- 10
-- 연산자
-- 0010000000,0010000000,1111111111,0010000000,0010000000,1000100100,0101000000,0010011011,0101000000,1010100100
-- 오리
UPDATE game_info SET game_code = '0001100000,0011110000,1111110000,0011110000,0001100000,0011110000,0111111111,1111111110,0111111100,0001111000' where game_seq = 10;
-- 0001100000,0011110000,1111110000,0011110000,0001100000,0011110000,0111111111,1111111110,0111111100,0001111000
-- 음표
-- 0000001111,0001110001,0001000011,0001111101,0001000001,0001000111,0111001111,1111001111,1111000110,0110000000
-- 박쥐
-- 0100000010,1101001011,1001111001,1101111011,1110110111,1111111111,1101111011,1000110001,1100110011,0110110110
-- 오토바이
-- 111000111111101,111010111111101,111000111111011,111101110000111,111000001100111,111000111100011,111000001100001,111101101100111,011001101100111,010000101000011,000100000010001,101110110111011,100100110010011,110001111000111,111111111111111





select * from game_info where game_level = 1;
commit;









-- 게임 데이터
INSERT INTO USER_INFO( USER_SEQ , USER_ID , USER_PW , USER_NICK ) VALUES ( USER_SEQ.NEXTVAL , 'test' , '1234' , '도토리' );
INSERT INTO USER_INFO( USER_SEQ , USER_ID , USER_PW , USER_NICK ) VALUES ( USER_SEQ.NEXTVAL , 'test1' , '1234' , '확인용' );
INSERT INTO USER_INFO( USER_SEQ , USER_ID , USER_PW , USER_NICK ) VALUES ( USER_SEQ.NEXTVAL , 'test2' , '1234' , 'ㅎㅇ' );

INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '테스트' , '10000,00000,00000,00000,00000' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '하트' , '01010,11111,11111,01110,00100' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '스마일' , '01010,01010,00000,10001,01110' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '열쇠' , '00100,00100,01110,01010,01110' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '우산' , '01110,11111,10101,00100,00110' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '집' , '00100,01110,11111,01010,01110' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 1 , '딸기' , '00100,11111,10101,01010,00100' );
COMMIT;

INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 2 , '박쥐' , '0100000010,1101001011,1001111001,1101111011,1110110111,1111111111,1101111011,1000110001,1100110011,0110110110' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 2 , '음표' , '0000001111,0001110001,0001000011,0001111101,0001000001,0001000111,0111001111,1111001111,1111000110,0110000000' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 2 , '오리' , '1110011111,1100001111,0000001111,1100001111,1110011111,1100001111,1000000000,0000000001,1000000011,1110000111' );
INSERT INTO GAME_INFO( GAME_SEQ , GAME_LEVEL , GAME_SUBJECT , GAME_CODE ) VALUES ( GAME_SEQ.NEXTVAL , 2 , '연산자' , '0010000000,0010000000,1111111111,0010000000,0010000000,1000100100,0101000000,0010011011,0101000000,1010100100' );
-- game_seq 오류 수정
UPDATE game_info SET game_level = 2 where game_seq = 49;





-- sqlplus 계정 생성 및 권한 부여
-- grant
-- dcltest 접근 권환 부여 후 확인

-- 계정 생성
CREATE USER C##NEMO IDENTIFIED BY NEMO1234 ;

-- 계정 권한 부여
GRANT CREATE SESSION TO C##NEMO;
GRANT CONNECT , RESOURCE, DBA TO C##NEMO ;
--GRANT SELECT ON C##SERVICE.직원 TO C##HACKER ;
--GRANT UPDATE ON C##SERVICE.직원 TO C##HACKER ;
--GRANT SELECT, UPDATE ON C##SERVICE.직원 TO C##HACKER ;

-- 계정 권한 삭제
--REVOKE SELECT, UPDATE ON C##SERVICE.직원 FROM C##HACKER ;

-- 계정 삭제
--DROP USER C##HACKER ;


-------- 테이블 생성 --------


DROP TABLE USER_INFO;
DROP TABLE GAME_INFO;
DROP TABLE USER_GAME_INFO;

-- 제약사항 무시하고 테이블 지우기
drop table game_info CASCADE CONSTRAINTS;
drop table user_info CASCADE CONSTRAINTS;
drop table user_game_info CASCADE CONSTRAINTS;
commit;





-- 회원정보 테이블 생성
CREATE TABLE USER_INFO(
    USER_SEQ    NUMBER(20)  NOT NULL,
    USER_ID     VARCHAR2(20) NOT NULL,
    USER_NICK   VARCHAR2(20) NOT NULL,
    USER_PW     VARCHAR2(20) NOT NULL,
    USER_COIN   NUMBER(30),
    USER_HINT   NUMBER(30),
    USER_LIFE   NUMBER(10)
);


-- 회원 게임정보 테이블 생성
CREATE TABLE USER_GAME_INFO (
    USER_SEQ NUMBER(20) NOT NULL,
    GAME_SEQ NUMBER(20) NOT NULL,
    GAME_TIME VARCHAR2(10),
    GAME_CLEAR NUMBER(1) DEFAULT 0
);

-- 게임정보 테이블 생성
CREATE TABLE GAME_INFO(
    GAME_SEQ     NUMBER(20) NOT NULL,
    GAME_LEVEL   NUMBER(10) NOT NULL,
    GAME_SUBJECT VARCHAR2(10) NOT NULL,
    GAME_CODE    VARCHAR2(4000) NOT NULL
);


-------- SEQUENCE 설정 ---------

CREATE SEQUENCE USER_SEQ START WITH 1 INCREMENT BY 1 MAXVALUE 10000;

CREATE SEQUENCE GAME_SEQ START WITH 1 INCREMENT BY 1 MAXVALUE 100000;


-------- PRIMARY KEY 설정 --------


-- USER_INFO 테이블의 USER_SEQ(회원번호)를 PRIMARY KEY로 설정
ALTER TABLE USER_INFO ADD CONSTRAINT PK_USER_INFO_TABLE PRIMARY KEY( USER_SEQ );

-- GAME_INFO 테이블의 GAME_SEQ(게임번호)를 PRIMARY KEY로 설정
ALTER TABLE GAME_INFO ADD CONSTRAINT PK_GAME_INFO_TABLE PRIMARY KEY ( GAME_SEQ );



-------- FOREIGN KEY 설정 --------

-- USER_GAME_INFO테이블에서 USER_INFO의 USER_SEQ를 외래키 지정
ALTER TABLE USER_GAME_INFO ADD CONSTRAINT FK_U_G_INFO_REF_U_INFO
FOREIGN KEY ( USER_SEQ ) REFERENCES USER_INFO( USER_SEQ );

-- USER_GAME_INFO테이블에서 GAME_INFO의 GAME_SEQ를 외래키 지정
ALTER TABLE USER_GAME_INFO ADD CONSTRAINT FK_U_G_INFO_REF_G_INFO
FOREIGN KEY ( GAME_SEQ ) REFERENCES GAME_INFO( GAME_SEQ );


-------- UNIQUE KEY 설정 --------

-- USER_INFO 테이블의 USER_ID와 USER_NICK을 UNIQUE KEY로 설정
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_ID UNIQUE ( USER_ID );
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_NICK UNIQUE ( USER_NICK );


-------- DEFAULT 설정 --------

-- USER_GAME_INFO 테이블의 GAME_TIME과 USER_INFO 테이블의 USER_COIN을 기본 0으로 설정
ALTER TABLE USER_GAME_INFO MODIFY ( GAME_TIME DEFAULT '0' ) ;

ALTER TABLE USER_INFO MODIFY ( USER_COIN DEFAULT 0 ) ;

commit;
------


-- 제약조건 삭제
ALTER TABLE '테이블명' DROP CONSTRAINT '제약조건명';


-- 제약조건 조회
SELECT * FROM    ALL_CONSTRAINTS
WHERE    TABLE_NAME = USER_INFO;



-- PK 제약조건 추가
ALTER TABLE '테이블명' ADD PRIMARY KEY ('칼럼명1, 칼럼명2...');
 
-- PK 제약조건 추가(제약조건명 지정)
ALTER TABLE '테이블명' ADD CONSTRAINT '제약조건명' PRIMARY KEY ('칼럼명1, 칼럼명2...');
 
-- 테이블의 PK 제약조건 삭제
ALTER TABLE '테이블명' DROP PRIMARY KEY:


-- FK 제약조견 추가
ALTER TABLE '테이블명' ADD CONSTRAINT '제약조건명' FOREIGN KEY('외래키 칼럼명') 
REFERENCES '참조테이블'('참조테이블_PK') [ON DELET 옵션] [ON UPDATE 옵션]
 
/*
 *  ▶ [ ] 는 생략가능하다. 
 *
 *  ON DELET : 참조 테이블의 튜플이 삭제되었을 때 기본 테이블에 취해야 할 사항을 지정
 *  ON UPDATE : 참조 테이블의 참조 속성 값이 변경되었을 때 기본 테이블에 취해야 할 사항을 지정
 */
 
 /*
  *  옵션 : 총 4가지 옵션이 있다.
  * 
  *  1. NO ACTION : 참조 테이블에 변화가 있어도 기본 테이블에는 아무 조취를 취하지 않는다.
  *  
  *  2. CASCADE : 참조 테이블의 튜플이 사제되면 기본 테이블의 관련 튜플도 삭제되고, 
  *                            속성이 변경되면 관련 튜플의 속성 값도 모두 변경된다.
  *               
  *  3. SET NULL : 참조 테이블에 변화가 있으면 기본 테이블의 과련 튜플의 속성 값을 NULL로 변경한다.
  *
  *  4. SET DEFAULT : 참조 테이블에 변화가 있으면 기본 테이블의 관련 튜플의 속성 값을 기본값으로 변경한다.
  */












-------- 테이블 생성 --------


-- 회원정보 테이블 생성
CREATE TABLE USER_INFO(
    USER_SEQ    NUMBER(20)  NOT NULL,
    USER_ID     VARCHAR2(20) NOT NULL,
    USER_NICK   VARCHAR2(20) NOT NULL,
    USER_PW     VARCHAR2(20) NOT NULL,
    USER_COIN   NUMBER(30),
    USER_HINT   NUMBER(30),
    USER_LIFE   NUMBER(10)
);

-- 회원 게임정보 테이블 생성
CREATE TABLE USER_GAME_INFO (
    USER_SEQ NUMBER(20) NOT NULL,
    GAME_SEQ NUMBER(20) NOT NULL,
    GAME_TIME VARCHAR2(20),
    GAME_CLEAR NUMBER(1) DEFAULT 0
);

-- 게임정보 테이블 생성
CREATE TABLE GAME_INFO(
    GAME_SEQ    NUMBER(20) NOT NULL,
    GAME_LEVEL  NUMBER(10) NOT NULL,
    GAME_ANS    VARCHAR2(4000) NOT NULL
);


-------- SEQUENCE 설정 ---------

CREATE SEQUENCE USER_SEQ START WITH 1 INCREMENT BY 1 MAXVALUE 10000;

CREATE SEQUENCE GAME_NO START WITH 1 INCREMENT BY 1 MAXVALUE 100000;


-------- PRIMARY KEY 설정 --------


-- USER_INFO 테이블의 USER_SEQ(회원번호)를 PRIMARY KEY로 설정
ALTER TABLE USER_INFO ADD CONSTRAINT PK_USER_INFO_TABLE PRIMARY KEY( USER_SEQ );

-- GAME_INFO 테이블의 GAME_SEQ(게임번호)를 PRIMARY KEY로 설정
ALTER TABLE GAME_INFO ADD CONSTRAINT PK_GAME_INFO_TABLE PRIMARY KEY ( GAME_SEQ );



-------- FOREIGN KEY 설정 --------

-- USER_GAME_INFO테이블에서 USER_INFO의 USER_SEQ를 외래키 지정
ALTER TABLE USER_GAME_INFO ADD CONSTRAINT FK_USER_GAME_INFO_REF_USER_INFO

FOREIGN KEY ( USER_SEQ ) REFERENCES USER_INFO( USER_SEQ );

-- USER_GAME_INFO테이블에서 GAME_INFO의 GAME_SEQ를 외래키 지정
ALTER TABLE USER_GAME_INFO ADD CONSTRAINT FK_USER_GAME_INFO_REF_GAME_INFO

FOREIGN KEY ( GAME_SEQ ) REFERENCES GAME_INFO( GAME_SEQ );


-------- UNIQUE KEY 설정 --------

-- USER_INFO 테이블의 USER_ID와 USER_NICK을 UNIQUE KEY로 설정
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_ID UNIQUE ( USER_ID );
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_NICK UNIQUE ( USER_NICK );



commit;



? 외래키 지정
ALTER TABLE USER_GAME_INFO ADD CONSTRAINT FK_U_G_INFO_REF_G_INFO
FOREIGN KEY ( GAME_SEQ ) REFERENCES GAME_INFO( GAME_SEQ );


-------- UNIQUE KEY 설정 --------

-- USER_INFO 테이블의 USER_ID와 USER_NICK을 UNIQUE KEY로 설정
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_ID UNIQUE ( USER_ID );
ALTER TABLE USER_INFO ADD CONSTRAINT UK_USER_INFO_TABLE_NICK UNIQUE (
